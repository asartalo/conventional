name: build

on:
  push:
    branches: ["*"]

jobs:
  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release):')"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v2

  test:
    name: Tests
    # This job will run on ubuntu virtual machine
    runs-on: ubuntu-latest
    needs: commitlint
    outputs:
      branch: ${{ steps.branchinfo.outputs.branch }}

    steps:
      - uses: nelonoel/branch-name@v1.0.1
      # Use branch name for whatever purpose
      - name: Store the branch name
        id: branchinfo
        run: echo "::set-output name=branch::${BRANCH_NAME}"

      - name: Check if we were able to save branch info
        run: echo ${{ steps.branchinfo.outputs.branch }}

      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d

      # Checkout
      - uses: actions/checkout@v3

      - name: Get dependencies
        run: dart pub get

      - name: Check dart formatting
        run: dart format --set-exit-if-changed .

      - name: Statically analyze the Dart code for any errors.
        run: dart analyze .

      - name: Run Tests with coverage
        run: dart run coverage:test_with_coverage

      - name: Upload coverage
        uses: coverallsapp/github-action@v1.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.outputs.branch == 'main' }}
    outputs:
      shouldRelease: ${{ steps.releaseInfo.outputs.shouldRelease }}
      version: ${{ steps.releaseInfo.outputs.version }}
      summary: ${{ steps.releaseInfo.outputs.summary }}

    steps:
      - run: echo ${{ needs.test.outputs.branch }}

      - name: Setup Dart SDK
        # uses: dart-lang/setup-dart@6a218f2413a3e78e9087f638a238f6b40893203d
        uses: dart-lang/setup-dart@v1

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Get dependencies
        run: dart pub get

      - name: Install release_tools
        run: dart pub global activate release_tools

      - name: Hookup pub tools
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Check if pub tools are available
        run: which release_tools

      - name: Prepare release
        run: |
          release_tools prepare_release -w
          cat VERSION.txt

      - name: Get Release Info
        id: releaseInfo
        run: |
          if [ -e VERSION.txt ]
          then
            shouldRelease="yes"
            releaseVersion=$(cat VERSION.txt)
            summary=$(cat RELEASE_SUMMARY.txt)
            echo "::set-output name=version::${releaseVersion}"
            echo "::set-output name=summary::${summary}"
          else
            shouldRelease="false"
          fi
          echo "::set-output name=shouldRelease::${shouldRelease}"

      - name: Commit Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        run: |
          git diff
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "chore(release): prepare release for ${{ steps.releaseInfo.outputs.version }}"
          git push

      - name: Create Release
        if: steps.releaseInfo.outputs.shouldRelease == 'yes'
        id: createRelease
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.PAT }}
          tag: ${{ steps.releaseInfo.outputs.version }}
          name: Release ${{ steps.releaseInfo.outputs.version }}
          body: |
            Changes in this Release

            ${{ steps.releaseInfo.outputs.summary }}

          draft: false
          prerelease: false
